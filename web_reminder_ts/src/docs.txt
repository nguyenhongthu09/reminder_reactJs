  totalCount?: number; 
  Dấu chấm hỏi ? sau tên thuộc tính là một cách để chỉ định rằng thuộc tính đó là tùy chọn, có nghĩa là nó có thể có giá trị hoặc có thể không.
  Trong trường hợp này,
   totalCount có thể được sử dụng để lưu trữ số lượng các mục trong danh sách, nhưng nó không bắt buộc phải có giá trị ngay từ khi đối tượng được khởi tạo.
    Thay vào đó, nó có thể được cập nhật hoặc thêm vào sau khi đối tượng đã được tạo.
     Điều này cho phép bạn linh hoạt trong việc sử dụng đối tượng IListNote mà không cần phải cung cấp giá trị cho totalCount mỗi khi tạo mới một đối tượng mới.


+setListNote(listData as IListNote[]);
=> listData as IListNote[] chuyển đổi listData thành một mảng các đối tượng IListNote. 
Điều này giả định rằng listData đã được khởi tạo hoặc đã được đảm bảo là một mảng của các đối tượng có 
cấu trúc giống IListNote.
/////////////////
Actions đơn giản là các events. Chúng là cách mà chúng ta send data từ app đến Redux store.
   Những data này có thể là từ sự tương tác của user vs app, API calls hoặc cũng có thể là từ form submission.

Reducers là các function nguyên thủy chúng lấy state hiện tại của app, thực hiện một action và trả về một state mới. 
  Những states này được lưu như những objects và chúng định rõ cách state của một ứng dụng thay đổi trong việc phản hồi một action được gửi đến store.

Store lưu trạng thái ứng dụng và nó là duy nhất trong bất kỳ một ứng dụng Redux nào. 
  Bạn có thể access các state được lưu, update state, và đăng ký or hủy đăng ký các listeners thông qua helper methods.

/////
const deleteListNote = (listId: string) => async (dispatch: Dispatch) => {
  try {
    await delList(listId);
    dispatch({ type: DELETE_LIST_NOTE, payload: { listId } });
    console.log(listId, "xoa thanh cong");
  } catch (error) {
    console.error("Error deleting list:", error);
  }
};

const updateListTotalCount = (listId: string) => ({
  type: UPDATE_LIST_TOTAL_COUNT,
  payload: { listId },
});

Cả hai hàm deleteListNote và updateListTotalCount đều là action creators trong Redux. Tuy nhiên, chúng được cài đặt khác nhau về cách trả về action object.

deleteListNote:Hàm này thực hiện gọi API để xóa một list theo listId. Sau khi xóa thành công, nó dispatch một action object với type là DELETE_LIST_NOTE và payload chứa listId.
Vì hàm này không cần phải trả về bất kỳ giá trị nào (như là một action object), nó có thể trả về một async function.
updateListTotalCount:Hàm này không thực hiện bất kỳ thao tác bất đồng bộ nào, chỉ đơn giản là trả về một action object.
Do không cần phải sử dụng async/await, nó được triển khai dưới dạng một hàm đồng bộ thông thường, trả về ngay một action object.
////////////////////////////////
Redux Toolkit là thư viện được phát triển bởi ReduxJS, giúp viết mã Redux nhanh chóng, toàn diện và tuân thủ chuẩn mực.
 Nó giải quyết vấn đề phức tạp của Redux và cung cấp API tiện ích để viết mã ngắn gọn, dễ đọc hơn và tuân theo các mẫu thiết kế tốt nhất.

 Redux và Redux Toolkit đều giúp quản lý trạng thái ứng dụng, nhưng RTK mang đến nhiều lợi ích đáng kể so với Redux thuần túy.
Đơn giản hóa cú pháp: Trong Redux, bạn cần tạo ra action types, action creators, và reducers riêng biệt cho mỗi trạng thái. 
  Trong khi đó, RTK sử dụng hàm createSlice để tự động tạo ra cả ba.
Cấu hình cơ sở dữ liệu giảm thiểu: RTK đi kèm với Redux Thunk và Redux DevTools, giúp giảm thiểu công việc cấu hình.
Immutability trực tiếp: Redux yêu cầu sử dụng cú pháp "immutable" để thay đổi trạng thái. 
  RTK cho phép bạn viết code "mutable" thực tế mà vẫn giữ được tính "immutable".
  +createSlice là một hàm mạnh mẽ giúp tự động hóa việc tạo ra action types, action creators và reducers. Bạn chỉ cần định nghĩa tên slice, trạng thái ban đầu và một đối tượng chứa các reducers, sau đó createSlice sẽ tạo ra một slice reducer với các action tương ứng.
  +createAsyncThunk là một hàm giúp xử lý các actions async một cách đơn giản. Nó tự động dispatch actions tại các giai đoạn khởi đầu, thành công và thất bại của promise.
  