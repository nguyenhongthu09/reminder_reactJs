  totalCount?: number; 
  Dấu chấm hỏi ? sau tên thuộc tính là một cách để chỉ định rằng thuộc tính đó là tùy chọn, có nghĩa là nó có thể có giá trị hoặc có thể không.
  Trong trường hợp này,
   totalCount có thể được sử dụng để lưu trữ số lượng các mục trong danh sách, nhưng nó không bắt buộc phải có giá trị ngay từ khi đối tượng được khởi tạo.
    Thay vào đó, nó có thể được cập nhật hoặc thêm vào sau khi đối tượng đã được tạo.
     Điều này cho phép bạn linh hoạt trong việc sử dụng đối tượng IListNote mà không cần phải cung cấp giá trị cho totalCount mỗi khi tạo mới một đối tượng mới.


+setListNote(listData as IListNote[]);
=> listData as IListNote[] chuyển đổi listData thành một mảng các đối tượng IListNote. 
Điều này giả định rằng listData đã được khởi tạo hoặc đã được đảm bảo là một mảng của các đối tượng có 
cấu trúc giống IListNote.
/////////////////
Actions đơn giản là các events. Chúng là cách mà chúng ta send data từ app đến Redux store.
   Những data này có thể là từ sự tương tác của user vs app, API calls hoặc cũng có thể là từ form submission.

Reducers là các function nguyên thủy chúng lấy state hiện tại của app, thực hiện một action và trả về một state mới. 
  Những states này được lưu như những objects và chúng định rõ cách state của một ứng dụng thay đổi trong việc phản hồi một action được gửi đến store.

Store lưu trạng thái ứng dụng và nó là duy nhất trong bất kỳ một ứng dụng Redux nào. 
  Bạn có thể access các state được lưu, update state, và đăng ký or hủy đăng ký các listeners thông qua helper methods.

/////
const deleteListNote = (listId: string) => async (dispatch: Dispatch) => {
  try {
    await delList(listId);
    dispatch({ type: DELETE_LIST_NOTE, payload: { listId } });
    console.log(listId, "xoa thanh cong");
  } catch (error) {
    console.error("Error deleting list:", error);
  }
};

const updateListTotalCount = (listId: string) => ({
  type: UPDATE_LIST_TOTAL_COUNT,
  payload: { listId },
});

Cả hai hàm deleteListNote và updateListTotalCount đều là action creators trong Redux. Tuy nhiên, chúng được cài đặt khác nhau về cách trả về action object.

deleteListNote:Hàm này thực hiện gọi API để xóa một list theo listId. Sau khi xóa thành công, nó dispatch một action object với type là DELETE_LIST_NOTE và payload chứa listId.
Vì hàm này không cần phải trả về bất kỳ giá trị nào (như là một action object), nó có thể trả về một async function.
updateListTotalCount:Hàm này không thực hiện bất kỳ thao tác bất đồng bộ nào, chỉ đơn giản là trả về một action object.
Do không cần phải sử dụng async/await, nó được triển khai dưới dạng một hàm đồng bộ thông thường, trả về ngay một action object.